# This is the startup.jl file that should reside in
# ~/.julia/config/startup.jl
# A simple way to install it is to run the ./install.sh script
# in this directory.

"""
    SimplePackageLoader(pkg_name,verbose=false)
    
This is a function form of the `using` command in Julia.
Instead of `using SomePackage` we can instead call
`SimplePackageLoader("SomePackage")`. With `verbose` set to
`true` each `using` command is printed.

This can also be called with a list of package names.
"""
function SimplePackageLoader(pkg_name::String, verbose::Bool = false)
    command = "using $pkg_name"
    if verbose
        @info command
    end
    eval(Meta.parse(command))
    nothing
end

function SimplePackageLoader(pkgs, verbose::Bool = false)
    for p in pkgs
        SimplePackageLoader(p, verbose)
    end
    nothing
end

"""
`list_of_favorites()` returns a list of the
packages to be loaded when `SimpleFavorites()` is called.
"""
function list_of_favorites()
    packages = [
        "Permutations"
        "SimplePartitions"
        "SimpleGraphs"
        "BigCombinatorics"
        "SimpleTools"
        "LinearAlgebra"
        "ShowSet"
        "Primes"
        "SimpleRandom"
        "SimplePolynomials"
    ]
    return packages
end

"""
`list_of_graph_theory()` are the packages to use when focused on 
graph computing.
"""
function list_of_graph_theory()
    packages = [
        "SimpleGraphs"
        "SimpleGraphAlgorithms"
        "ChooseOptimizer"
        "Gurobi"
        "ShowSet"
        "SimplePolynomials"
    ]
    return packages
end

"""
`list_of_graph_draw()` returns a list of the packages I use 
for graph visualization.
"""
function list_of_graph_draw()
    packages = [
        "Plots"
        "SimpleDrawing"
        "DrawSimpleGraphs"
    ]
end



"""
    GraphTheory(draw_pkgs::Bool=true, verbose::Bool=true)

loads my packages for working on graphs
and sets the optmizer to be `Gurobi` (non-verbose). The list is generated by `list_of_graph_theory()`.

If `draw_pkgs` is set to false, don't load the drawing packages returned by  `list_of_graph_draw()`
"""
function GraphTheory(draw_pkgs::Bool = true, verbose::Bool = true)
    SimplePackageLoader(list_of_graph_theory(), verbose)
    eval(Meta.parse("use_Gurobi()"))

    if draw_pkgs
        SimplePackageLoader(list_of_graph_draw(), verbose)
    else
        if verbose
            @info "Graph drawing packages not loaded"
        end
    end
end
"""
    box_my_text(line)

prints out a single line of text embedded in a
box consisting of corner and connector characters.
```
julia> box_my_text("Hello")
┌───────┐
│ Hello │
└───────┘
```
"""
function box_my_text(line::String)
    UL = "$(Char(9484))"
    UR = "$(Char(9488))"
    LL = "$(Char(9492))"
    LR = "$(Char(9496))"
    HOR = "$(Char(9472))"
    VER = "$(Char(9474))"
    SPA = " "

    n = length(line)
    println(UL * HOR^(n + 2) * UR)
    println(VER * SPA * line * SPA * VER)
    println(LL * HOR^(n + 2) * LR)
    nothing
end

# When the "east" servers are not updating right, do this:

"""
    change_package_server(server::String = "us-west.pkg.julialang.org")

Sometimes the default package server doesn't get updated, so this is a way to 
specify a different one that seems to be more reliable. 
"""
function change_package_server(server::String = "us-west.pkg.julialang.org")
    Base.ENV["JULIA_PKG_SERVER"] = server
    println("Julia package server set to $server")
    nothing
end


# box_my_text("Use GraphTheory() to load graph theory packages")
